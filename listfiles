#!/bin/env python

import os
import argparse

parser = argparse.ArgumentParser(
    description='Search for files in directory. With both\
     --name and --date flags it will sort only by name.')

parser.add_argument('path', metavar='<path>',
                    nargs=1, help="target directory")
parser.add_argument('-s', '--sort', metavar='type',
                    nargs='?', default=None, help="sort by 'name' or 'time'")
parser.add_argument('-f', '--filter', metavar='ext',
                    nargs='?', default=None, help='filter by file extension')
parser.add_argument('-r', '--recursive', action='store_true',
                    help='recursive search')
parser.add_argument('--nodirs', action='store_true',
                    help='exclude dirs from list')
parser.add_argument('-v', '--version', action='version',
                    version='%(prog)s 0.2.8')

args = parser.parse_args()


def main():
    tree(args.path[0])


def tree(path):
    path = os.path.abspath(path)
    dirs, files = listdir(path)[:2]

    if args.sort == 'name':
        dirs.sort()
        files.sort()
    elif args.sort == 'ctime':
        files.sort(key=os.path.getctime)
        dirs.sort(key=os.path.getctime)
    if args.filter:
        files = filter(lambda x: x.endswith('.%s' % args.filter), files)
        dirs = []
    else:
        if not args.nodirs:
            print('[%s]' % path)
    if args.nodirs:
        dirs = []

    walk(path, dirs, files)


def walk(root, dirs, files, prefix=''):
    if files:
        file_prefix = prefix + ('|   ' if dirs else '')
        for name in files:
            print(file_prefix + name)
        if dirs:
            print(file_prefix)
    dir_prefix, walk_prefix = prefix + '+---', prefix + '|   '
    dir_postfix = '/'
    for pos, neg, name in enumerate2(dirs):

        # last entry
        if neg == -1:
            walk_prefix = prefix + '    '

        print(dir_prefix + name + dir_postfix)
        path = os.path.join(root, name)
        try:
            dirs, files = listdir(path)[:2]
        except:
            pass
        else:
            if args.recursive:
                walk(path, dirs, files, walk_prefix)


def listdir(path):
    dirs, files, links = [], [], []
    for name in os.listdir(path):
        path_name = os.path.join(path, name)
        if not args.nodirs:
            if os.path.isdir(path_name):
                dirs.append(name)
        if os.path.isfile(path_name):
            files.append(name)
        elif os.path.islink(path_name):
            links.append(name)
    return dirs, files, links


def enumerate2(sequence):
    length = len(sequence)
    for count, value in enumerate(sequence):
        yield count, count - length, value

if __name__ == '__main__':
    main()
