#!/bin/env python

import requests
import argparse
import getpass
import json
import os.path
from os import path

ctype = 'application/json; charset=utf8'


class GithubUser:

    def __init__(self):
        if path.exists("./pr-stats.login"):
            with open('./pr-stats.login', "r") as outfile:
                self.login = outfile.read()
        else:
            self.login = input('GitHub Login: ')
            if input('Remember login? y/N: ') == 'y':
                with open('./pr-stats.login', "w") as outfile:
                    outfile.write(self.login)
                print('Login can be edited in ./pr-stats.login')
        self.passwd = getpass.getpass(prompt='Password: ', stream=None)

        while requests.get('https://api.github.com/user',
                           auth=(self.login, self.passwd)).status_code != 200:
            print('Invalid password - try again')
            self.passwd = getpass.getpass(prompt='Password:', stream=None)

        print('Successfully logged in as', self.login, '\n')

    def get_repos(self, user):
        rj = requests.get('https://api.github.com/users/' +
                          user + '/repos', auth=(self.login, self.passwd)).json()
        print('repos list:\n')
        for i in range(len(rj)):
            if len(rj[i]['name']) <= 5:
                sep = '\t\t\t\t'
            elif len(rj[i]['name']) <= 11:
                sep = '\t\t\t'
            elif len(rj[i]['name']) <= 18:
                sep = '\t\t'
            else:
                sep = '\t'
            print(str(i + 1) + '. ' + rj[i]['name'], rj[i]['svn_url'], sep=sep)

    def get_branches(self, user, repo):
        rj = requests.get('https://api.github.com/repos/' + user + '/' +
                          repo + '/branches', auth=(self.login, self.passwd)).json()
        print('branches list:\n')

        for i in range(len(rj)):
            if len(rj[i]['name']) <= 3:
                sep = '\t\t\t\t'
            elif len(rj[i]['name']) <= 7:
                sep = '\t\t\t'
            elif len(rj[i]['name']) <= 15:
                sep = '\t\t'
            else:
                sep = '\t'
            print(str(i + 1) + '. ' + rj[i]['name'], 'https://github.com/' +
                  user + '/' + repo + '/tree/' + rj[i]['name'], sep=sep)

        print()

    def get_labels(self, user, repo):
        rj = requests.get('https://api.github.com/repos/' + user +
                          '/' + repo + '/labels', auth=(self.login, self.passwd)).json()
        print('labels list:\n')

        for i in range(len(rj)):
            print(str(i + 1) + '. ' + rj[i]['name'])

        print()

    def get_pulls(self, user, repo):
        rj = requests.get('https://api.github.com/repos/' + user +
                          '/' + repo + '/pulls', auth=(self.login, self.passwd)).json()
        print('pull requests:\n')

        for i in range(len(rj)):
            print(str(i + 1) + '. ' + rj[i]['title'])
            print('Status:\t\t', rj[i]['state'])
            print('Created at:\t', str(
                rj[i]['created_at']).replace('T,', ' '), '')
            labels = ''
            for ll in rj[i]['labels']:
                labels += '[' + ll['name'] + '] '
            print('Labels:\t\t', labels)
            print()

    def __str__(self):
        return str(requests.get('https://api.github.com/user',
                                auth=(self.login, self.passwd)).content)

    def get_time(self, user, repo):
        rj = requests.get('https://api.github.com/repos/' + user +
                          '/' + repo, auth=(self.login, self.passwd)).json()
        print('Created at:', str(rj['created_at']).replace('T,', ' '))
        print('Updated at:', str(rj['updated_at']).replace('T,', ' '))
        print('Pushed at:', str(rj['pushed_at']).replace('T,', ' '))
        print()

    def __str__(self):
        return str(requests.get('https://api.github.com/user',
                                auth=(self.login, self.passwd)).content)

user1 = GithubUser()

parser = argparse.ArgumentParser(description='Demo GitHub REST API script.')
parser.add_argument('-u', '--user', dest='user', default=user1.login,
                    help='GitHub user to inspect')
parser.add_argument('repo', nargs='?',
                    help='Repo name')
parser.add_argument('-a', '--all', action='store_true', help='List all repos')
parser.add_argument('-b', '--branches', action='store_true',
                    help='List all branches of choosen [repo]')
parser.add_argument('-l', '--labels', action='store_true',
                    help='List all labels attached to [repo]')
parser.add_argument('-t', '--time', action='store_true',
                    help='Print [repo] creation time')
parser.add_argument('-p', '--pulls', action='store_true',
                    help='Print [repo] creation time')
parser.add_argument('-v', '--version', action='version',
                    version='%(prog)s 2.0')

args = parser.parse_args()

if args.all:
    user1.get_repos(args.user)
    exit(0)

if args.repo:
    print('Repository <' + args.repo + '> at https://github.com/' +
          args.user + '/' + args.repo)
    print()
    if args.time:
        user1.get_time(args.user, args.repo)
    if args.branches:
        user1.get_branches(args.user, args.repo)
    if args.labels:
        user1.get_labels(args.user, args.repo)
    if args.pulls:
        user1.get_pulls(args.user, args.repo)
